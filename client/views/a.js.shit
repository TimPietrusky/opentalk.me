
console.log('utils');

function getMessages(){
	setTimeout(function(){
		if(mSub)mSub.stop();
		if(ouSub)ouSub.stop();
		$('.message').not('#mymessage').remove();
	},100);
	setTimeout(function(){
		mSub=Meteor.subscribeWithPagination('paginatedMessages',Session.get('roomid'), messagesLimit);
		ouSub=Meteor.subscribe('usersOnlineInThisRoom',Session.get('roomid'));
		Meteor.subscribe('MessagesReady',Session.get('roomid'),function(){
			console.log('messages ready');
			watchMessages();
		});
	},1000);
}


function checkLoadMore(){
	Meteor.call('messagesCount',Session.get('roomid'),function(err,result){
		messagesCount=result;
	});
	console.log('is ' + messagesCount + ' > ' + addedMessages +'  ?');
	if(messagesCount > addedMessages){
		console.log('yes');
		loadMore();
		
		if(messagesCount > messagesLimit)
			if( $('.loading') ) $('.loading').addClass('show-loading');
		else
			if( $('.loading') ) $('.loading').removeClass('show-loading');
	}else{
		console.log('no');
		console.log('no more messages');
		if( $('.loading') ) $('.loading').removeClass('show-loading');
	}
}



function watchMessages(){
	if(Messages.find({},{sort:{timestamp:-1},limit:1}).fetch().length > 0)
	latestTimestampAtLoad = Messages.find({},{sort:{timestamp:-1},limit:1}).fetch()[0].timestamp;
	if(mPagination)
		mPagination.stop();
	var prevUser=prevId=null;
	mPagination=Messages.find({},{sort:{timestamp:1}}).observeChanges({
		addedBefore: function(id, fields,before){
			addedMessages++;
			// console.log('added id ' +id + ' before ' + before);

			// $('.load-more').removeClass('show-loading');

			/*if I write and the message is not complete, don't add it to the list, only as soon as it changed status to messageComplete=true*/
			if(fields.userid === Session.get('userid') && fields.messageComplete===false)return;
			/*if I don't want realtime messages why should I render them if they are not complete YET??! Huh?*/
			if(!Session.get('realtimeEnabled') && fields.messageComplete===false)return;
			
			message = $('<li class="message" id="'+id+'"><span class="avatar"></span><b class="username">'+fields.username+'</b><p class="text">'+fields.text+'</p></li>');

			if(before === null) {
				//items of first load and recently typed ones
				// message.hide();
				$('#last').before(message);
				// console.log('prevUser ' +prevUser);
				// console.log('currUser ' +fields.username);
				if(prevUser===null || prevUser!==fields.username){
					//A NEW USER
					message.addClass('diffUser');
					message[0].firstChild.style.backgroundImage='url("' + fields.useravatar + '")';
					message[0].firstChild.classList.add('avatar-border');
					message[0].firstChild.classList.add('tip');
					// message[0].firstChild.setAttribute('data-tip',fields.username);

					$('#'+prevId).addClass('lastOfUser');
				}
				message[0].classList.add('new-message');
				//since all the message that have before === null are at the bottom, thisis a new message => display it like one
				// message.addClass('realtime').fadeIn(animationDuration,function(){if(stick && Session.get('userid'))scrollDown()});
			}else{
				// var offsetBottom = $('body').height() - $('body').scrollTop();
				var offsetBottom = document.body.offsetHeight - document.body.scrollTop;

				// console.log('old ' + id + ' prevUser ' + prevUser);
				//items of load-more+
				// message.hide();
				$('#'+before).before(message);
				//it is at the bottom of the list, so add lastOfUser class
			
				// console.log('=========');
				// console.log(fields.username);
				// console.log(prevUser);
				// console.log('=========');
				message[0].firstChild.style.backgroundImage='url("'+fields.useravatar+'")';
							
				// message[0].firstChild.classList.add('avatar-border');
				// message[0].firstChild.classList.add('tip');
				// message[0].firstChild.setAttribute('data-tip',fields.username);				
				// message[0].firstChild.classList.add('avatar-border');

				if(firstRunAfterMore){
					message.addClass('lastOfUser');
					firstRunAfterMore=false;
					
				}else{
					if(prevUser!==fields.username){
						/*NEW USER*/
						message.addClass('lastOfUser');
						message.next().addClass('diffUser');
						message.next()[0].firstChild.classList.add('avatar-border');
						message.next()[0].firstChild.classList.add('tip');
						// message.next()[0].firstChild.setAttribute('data-tip',message.next()[0].querySelector('.username').innerHTML );
					}else{
						/*SAME USER*/
						message.next().removeClass('diffUser');
						message.addClass('diffUser');
						message.next()[0].firstChild.style.backgroundImage='none';
						message.next()[0].firstChild.classList.remove('avatar-border');

					}
				}
				// message.delay(100).fadeIn(animationDuration,function(){if(stick && Session.get('userid'))scrollDown()});
				
				//let's see if this fixes the issue on android
				// setTimeout(function(){
				// 	$('body').scrollTop( $('body').height() - offsetBottom );
				// },2000);
			
				document.body.scrollTop = document.body.offsetHeight - offsetBottom;
			}

			prevUser=fields.username;
			prevId=id;

			// tiprAll();
			imageExp();
			
			if(stick)scrollDown();
		},
		changed: function(id,fields){
			// console.log('changed ' + id + ' to ' + fields.text);
			// console.log( $('#mymessage').val() );
			// console.log('lid ' +Session.get('lastInsertId'));
			// console.log(fields);
			// console.log('changed & lmu ' + prevUser);
			if( $('#'+id).length ){
				//update existing message
				if(fields.text !== undefined)
					$('#'+id+' .text').html( fields.text );
			}else 
			if(fields.messageComplete === true){
				console.log('message completed');
				var mfdb = Messages.find({_id:id}).fetch()[0];
				// console.log(mfdb);
				if(prevUser===mfdb.username){
					message = $('<li class="message new-message" id="'+id+'"><span class="avatar"></span><b class="username">'+mfdb.username+'</b><p class="text">'+mfdb.text+'</p></li>');
				}
				else{
					$('#'+prevId).addClass('lastOfUser');
					message = $('<li class="message diffUser new-message" id="'+id+'"><span class="avatar avatar-border tip" style="background:url('+mfdb.useravatar+')"></span><b class="username">'+mfdb.username+'</b><p class="text">'+ mfdb.text +'</p></li>');
				}
				prevUser=mfdb.username;
				prevId=id;
				// if(!prevUser)prevUser=fields.username;
				// message.hide();
				$('#last').before(message);
				// tiprAll();
				// message.addClass('realtime').fadeIn(animationDuration,function(){if(stick && Session.get('userid'))scrollDown()});	
			}
			imageExp();
			if(stick)
				scrollDown();
		},
		movedBefore: function(id,before){
			console.log(id + ' changed position to ' + before);
			//kinda works, but only if the moved element has an avatar, else it's moved withouth
			// if(before===null){
			// 	$('#'+id).slideUp(animationDuration, function(){ $(this).insertBefore($('#last')) }).slideDown(animationDuration);
			// }
		},
		removed: function(id){
			// if(id === $('.messages li').first().attr('id'))
			// 	return;

			// console.log('removed ' + id);
			// console.log('prevId ' + prevId);

			// console.log( $('#last').prev().attr('id') );

			if(id === $('#last').prev().attr('id')){
				prevUser=prevId=null;
			}

			// //set prevUser and prevId respectively to the prev element
			// if( $('#'+id).prev().attr('id') !== 'first' ){
			// 	console.log('an user canceled his message');
			// 	//there is at least one message, because there are already these fix elements first,last,li-message
			// 	if( $('.messages').children().length > 3 && !Session.get('lastInsertId') ){
			// 		console.log('restore prevUser and prevId');
			// 		// prevId = $('#'+prevId)[0].id;
			// 		prevUser = $('#'+prevId + ' .username').html();
			// 		console.log('prevId ' + prevId + ' prevUser ' +prevUser);
			// 	}
			// 	prevUser=prevId=null;
			// } else{
			// 	// prevUser=prevId=null;
			// 	// console.log('setting prevId ' + prevId + ' prevUser ' +prevUser);
			// }
			//if the next element in the list has an empty background it means it is from the same user, apply the image from this element (id) to it
			if( $('#'+id).next()[0] !== undefined && $('#'+id).next()[0] !== null &&  $('#'+id).next()[0].id !== 'last'){
				if( $('#'+id + ' .username').html() === $('#'+id).next()[0].querySelector('.username').innerHTML ){
					var bckpBg = $('#'+id)[0].firstChild.style.backgroundImage;
					$('#'+id).next()[0].firstChild.style.backgroundImage=bckpBg;
					$('#'+id).next()[0].firstChild.classList.add('avatar-border');
					$('#'+id).next().addClass('diffUser');
					$('#'+id).next()[0].firstChild.classList.add('tip');
					// $('#'+id).next()[0].firstChild.setAttribute('data-tip',$('#'+id + ' .username').html());
					// tiprAll();
				}else{
					console.log('strange behaviour');
				}
			}
			$('#'+id).remove();
		}
	});
}






/*
USER GOES OFFLINE
*/
/*
-unsubscribe from Messages, OnlineUsers
-remove user from OnlineUsers Collection (Meteor.call)
*/
function goOffline(){
	if(Session.get('userid'))
		
	else
		Meteor.call('setUserStatus',Session.get('userid'),Session.get('username'),Meteor._localStorage.getItem('roomid'),'offline');
}


function goOnline(){
	if(!loggingOut && Session.get('userid') && Session.get('roomid') && OnlineUsers.find({userid:Session.get('userid'),roomid:Session.get('roomid')}).fetch().length === 0){  
		//console.log('going Online with ' + Session.get('userid') + ' ' + Session.get('roomid') );
		setAvatar();
		Meteor.call('setUserStatus',Session.get('userid'),Session.get('username'),Session.get('roomid'),'online');
		Meteor.call('setUserId',Session.get('userid'));
	}
}


function setAvatar(){
	if( Meteor.user() ){
		if(Meteor.user().services){
			if(Meteor.user().services.twitter)
				Session.set('avatar',Meteor.user().services.twitter.profile_image_url);
			if(Meteor.user().services.google)
				Session.set('avatar',Meteor.user().services.google.picture);
			if(Meteor.user().services.facebook)
				Session.set('avatar','https://graph.facebook.com/'+Meteor.user().services.facebook.username+'/picture');
			if(Meteor.user().services.github){
				//make ajax call to get profile image
				var gh_api_url = 'https://api.github.com/users/' + Meteor.user().services.github.username;
				//console.log('ajax to gh');
				$.ajax({
				  url: gh_api_url
				}).done(function ( data ) {
				    if(data.avatar_url)
				    	Session.set('avatar',data.avatar_url);
				});
			}
		}
	}else{
		Session.set('avatar','/images/avatar.png');
	}
}